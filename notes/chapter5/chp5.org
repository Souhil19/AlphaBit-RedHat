# ------------------------------------------------------------------------------
#+TITLE:     Chapter 5: Managing Local Linux Users and Groups
#+SUBTITLE:  Kebairia Zakaria - July 2021
#+AUTHOR:    Kebairia Zakaria
#+EMAIL:     z.kebairia@esi-sba.dz
#+LANGUAGE:  en
#+STARTUP:   content showstars indent inlineimages hideblocks
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/home/zakaria/org/conf/rouger.css" />
#+OPTIONS:   toc:2 html-scripts:nil num:nil html-postamble:nil html-style:nil ^:nil
#+PROPERTY:  header-args  :dir /ssh:admin@alpha: :exports both
# ------------------------------------------------------------------------------
#+HTML: <div class="back"><a href="#table-of-contents">âŒ˜ Back to top</a></div>
* Account Mechanics
- A user is really nothing than a number, a 32-bits integer known as the user ID or *UID*, and everyting uses the users concept deals with this particual number. 
- On RedHat and its variants, the password algorithm can still be set in ~/etc/login.defs~ or through the 
  =authconfig= command, as shown here:
  #+begin_src sh :results output
    # to use the authconfig utility, you must install the authselect-compat
    # sudo yum install authselect-compat
    sudo authconfig --passalgo=sha512 --update
  #+end_src
* THE /ETC/PASSWD FILE
- ~/etc/passwd~ is just a list of users that act like a database of users information for the system
- the system uses this file to get extra information about a particular users, because as we know, the system only know and deals
with the *UID* which is just a 32-bit number, so it needs this file to map this *UID* and get these extra information.
but what is these information that we can get from the ~/etc/passwd~ file?.
- Each line in the file represents one user and contains 7 fields separated by colons(the delimiter):
  - Login name
  - encrypted password placeholder
  - UID (user ID) number
  - Default GID (the GID of the primary group) number
  - Optional "GECOS" information: full name, office, phone number, department...etc
  - Home directory
  - Login shell
- for example, let's take a look on our system's ~/etc/passwd~ file.
  - using the *head* command, we can see the first 10 lines of the file.
    #+begin_src sh :results output
      head /etc/passwd
    #+end_src


* Managing Local User Accounts
** ~useradd~ create users
- actualy, the =useradd= command is a fairly simple command, as we see earlier that in linux, there is the concept of *do one thing and do it well*.
  so here, the command =useradd= only helps us to create a new user, and with the help of its options we can specify specific inoformation along the creation of this user, lets see!:
  #+begin_src sh :results output :exports both
    sudo useradd --help
  #+end_src

  #+RESULTS:
  #+begin_example
  Usage: useradd [options] LOGIN
         useradd -D
         useradd -D [options]

  Options:
    -b, --base-dir BASE_DIR       base directory for the home directory of the
                                  new account
    -c, --comment COMMENT         GECOS field of the new account
    -d, --home-dir HOME_DIR       home directory of the new account
    -D, --defaults                print or change default useradd configuration
    -e, --expiredate EXPIRE_DATE  expiration date of the new account
    -f, --inactive INACTIVE       password inactivity period of the new account
    -g, --gid GROUP               name or ID of the primary group of the new
                                  account
    -G, --groups GROUPS           list of supplementary groups of the new
                                  account
    -h, --help                    display this help message and exit
    -k, --skel SKEL_DIR           use this alternative skeleton directory
    -K, --key KEY=VALUE           override /etc/login.defs defaults
    -l, --no-log-init             do not add the user to the lastlog and
                                  faillog databases
    -m, --create-home             create the user's home directory
    -M, --no-create-home          do not create the user's home directory
    -N, --no-user-group           do not create a group with the same name as
                                  the user
    -o, --non-unique              allow to create users with duplicate
                                  (non-unique) UID
    -p, --password PASSWORD       encrypted password of the new account
    -r, --system                  create a system account
    -R, --root CHROOT_DIR         directory to chroot into
    -P, --prefix PREFIX_DIR       prefix directory where are located the /etc/* files
    -s, --shell SHELL             login shell of the new account
    -u, --uid UID                 user ID of the new account
    -U, --user-group              create a group with the same name as the user
    -Z, --selinux-user SEUSER     use a specific SEUSER for the SELinux user mapping

  #+end_example
- to better understand these option, we will take the following scenario:
  let's create a user name *ahmed* with these specific information:
  | Name  | ahmed |
  |-------+-------|
  | Shell | bash  |
  |-------+-------|
  | UID   | 2000  |
  #+begin_src sh :results output :exports both
    sudo useradd -s $(which bash) -u 2000 ahmed
    grep "ahmed" /etc/passwd
  #+end_src

  #+RESULTS:
  : ahmed:x:2000:2000::/home/ahmed:/usr/bin/bash
- as we can see, the opiration is fairly easy, and it doesn't require a lot of skill to do that.

** ~usermod~ modifies existing users
- Now that we have a user named "ahmed", lets suppose that we need to change some information about it
  | Name  | yasser       |
  |-------+--------------|
  | Shell | sh           |
  |-------+--------------|
  | UID   | 2500         |
  |-------+--------------|
  | Home  | /home/yasser |
  |-------+--------------|
  #+begin_src sh :results output :exports both
    sudo usermod -l yasser -s $(which sh) -u 2500 -md /home/yasser ahmed
    grep yasser /etc/passwd
  #+end_src

  #+RESULTS:
  : yasser:x:2500:2000::/home/yasser:/usr/bin/sh

** ~userdel~ deletes a user
- let's create a testing account named demo
#+begin_src sh :results output
  sudo useradd -s $(which bash) demo
#+end_src

- after that, we will make him own some files
  #+begin_src sh :results output
    whoami
    mkdir -v demofiles
    touch demofiles/file{1..5}
    ls -l demofiles
  #+end_src

  #+RESULTS:
  : admin
  : total 0
  : -rw-rw-r--. 1 admin admin 0 Jul 22 19:08 file1
  : -rw-rw-r--. 1 admin admin 0 Jul 22 19:08 file2
  : -rw-rw-r--. 1 admin admin 0 Jul 22 19:08 file3
  : -rw-rw-r--. 1 admin admin 0 Jul 22 19:08 file4
  : -rw-rw-r--. 1 admin admin 0 Jul 22 19:08 file5

- we can see that these files are owned by the =admin= user, let's change their user and group ownership to the new user *demo*
  #+begin_src sh :results output
    sudo chown demo:demo demofiles/*
    ls -l demofiles
  #+end_src

  #+RESULTS:
  : total 0
  : -rw-rw-r--. 1 demo demo 0 Jul 22 19:08 file1
  : -rw-rw-r--. 1 demo demo 0 Jul 22 19:08 file2
  : -rw-rw-r--. 1 demo demo 0 Jul 22 19:08 file3
  : -rw-rw-r--. 1 demo demo 0 Jul 22 19:08 file4
  : -rw-rw-r--. 1 demo demo 0 Jul 22 19:08 file5
- after that we will delete the user =demo= so that these files will be, let say *orphants*, or files without user/group ownership
  #+begin_src sh :results output
    sudo userdel demo
    ls -l demofiles
  #+end_src

  #+RESULTS:
  : total 0
  : -rw-rw-r--. 1 1001 1001 0 Jul 22 19:08 file1
  : -rw-rw-r--. 1 1001 1001 0 Jul 22 19:08 file2
  : -rw-rw-r--. 1 1001 1001 0 Jul 22 19:08 file3
  : -rw-rw-r--. 1 1001 1001 0 Jul 22 19:08 file4
  : -rw-rw-r--. 1 1001 1001 0 Jul 22 19:08 file5
- there are multiple steps to fix this problem.
  1. we have to use the ~-r~ option with ~userdel~ command, as we can see this option helps us to remove files in the user's home directory, the home directory itself and the user mail spool.
  2. search for other files owned by this user, uid or search for any files that doesn't have user/group owner.
     you can mouve them to another location, delete them, tar them or change their ownership to another user and group
     #+begin_src sh :results output :exports both
       # change their user/group ownership into admin:admin
       sudo find / -nouser -nogroup 2> /dev/null -exec chown -v admin:admin {} \;
     #+end_src

     #+RESULTS:
     #+begin_example
     changed ownership of '/home/admin/demofiles/file1' from 1001:1001 to admin:admin
     changed ownership of '/home/admin/demofiles/file2' from 1001:1001 to admin:admin
     changed ownership of '/home/admin/demofiles/file3' from 1001:1001 to admin:admin
     changed ownership of '/home/admin/demofiles/file4' from 1001:1001 to admin:admin
     changed ownership of '/home/admin/demofiles/file5' from 1001:1001 to admin:admin
     changed ownership of '/home/demo' from 1001:1001 to admin:admin
     changed ownership of '/home/demo/.bash_logout' from 1001:1001 to admin:admin
     changed ownership of '/home/demo/.bash_profile' from 1001:1001 to admin:admin
     changed ownership of '/home/demo/.bashrc' from 1001:1001 to admin:admin
     #+end_example

* Managing Local Group Accounts
- A group must exist before a user can be added to that group.
** ~groupadd~ creates groups
- ~groupadd <groupname>~ without options uses the next available *GID* from the range specified in the ~/etc/login.defs~ file.
- the ~-g GID~ option is used to specify a specific GID.
  #+begin_src sh 
    sudo groupadd -g 5000 ateam
  #+end_src
- the ~-r~ option will create a system group using a GID from the range of valid system GID numbers listed in the ~/etc/login.defs~ file.
  #+begin_src sh
    sudo groupadd -r appusers
  #+end_src
** ~groupmod~ modifies existing groups
#+begin_src sh :results output :exports both
  sudo groupmod --help
#+end_src

#+HTML: <details><summary><b>groupmod options</b></summary>
#+RESULTS:
#+begin_example
Usage: groupmod [options] GROUP

Options:
  -g, --gid GID                 change the group ID to GID
  -h, --help                    display this help message and exit
  -n, --new-name NEW_GROUP      change the name to NEW_GROUP
  -o, --non-unique              allow to use a duplicate (non-unique) GID
  -p, --password PASSWORD       change the password to this (encrypted)
                                PASSWORD
  -R, --root CHROOT_DIR         directory to chroot into
  -P, --prefix PREFIX_DIR       prefix directory where are located the /etc/* files

#+end_example
- let's change ateam's GID
  #+begin_src sh :results none
    sudo groupmod -g 6000 ateam
  #+end_src
** ~groupdel~ deletes a group
- the ~groupdel~ command will rmeove a group.
  #+begin_src sh :results output
    sudo groupdel javaapp 2>&1
  #+end_src
- A group may not be removed if it is the primary grup0u of any existing user.
  As with ~userdel~, check all file systems to ensure that no files remain owned by the group.
** ~usermod~ alters group membership
- first let's check the options that we have with this command
  #+begin_src sh :results output :exports both
    sudo usermod --help
  #+end_src

#+HTML: <details><summary><b>usermod options</b></summary>
  #+RESULTS:
  #+begin_example
  Usage: usermod [options] LOGIN

  Options:
    -b, --badnames                allow bad names
    -c, --comment COMMENT         new value of the GECOS field
    -d, --home HOME_DIR           new home directory for the user account
    -e, --expiredate EXPIRE_DATE  set account expiration date to EXPIRE_DATE
    -f, --inactive INACTIVE       set password inactive after expiration
                                  to INACTIVE
    -g, --gid GROUP               force use GROUP as new primary group
    -G, --groups GROUPS           new list of supplementary GROUPS
    -a, --append                  append the user to the supplemental GROUPS
                                  mentioned by the -G option without removing
                                  the user from other groups
    -h, --help                    display this help message and exit
    -l, --login NEW_LOGIN         new value of the login name
    -L, --lock                    lock the user account
    -m, --move-home               move contents of the home directory to the
                                  new location (use only with -d)
    -o, --non-unique              allow using duplicate (non-unique) UID
    -p, --password PASSWORD       use encrypted password for the new password
    -R, --root CHROOT_DIR         directory to chroot into
    -P, --prefix PREFIX_DIR       prefix directory where are located the /etc/* files
    -s, --shell SHELL             new login shell for the user account
    -u, --uid UID                 new UID for the user account
    -U, --unlock                  unlock the user account
    -v, --add-subuids FIRST-LAST  add range of subordinate uids
    -V, --del-subuids FIRST-LAST  remove range of subordinate uids
    -w, --add-subgids FIRST-LAST  add range of subordinate gids
    -W, --del-subgids FIRST-LAST  remove range of subordinate gids

  #+end_example
#+HTML: </details>
#+HTML: </details>
- it seems that the ~-g~ option let us the primary group of a particular user.
  #+begin_src sh :results none
    # sudo usermod -g <newgroup> <username>
    sudo usermod -g student student
  #+end_src
- and we can add supplementary groups with the ~-aG~ options, where ~-G~ helps us adding the supplementary groups
  and the ~-a~ append these groups so that we won't override the old ones.

  #+begin_src sh :results none
    sudo groupadd sup_group
    sudo groupadd sup_group2
    sudo usermod -aG sup_group,sup_group2 zakaria
  #+end_src

#+HTML: </details>
#+HTML: <div class="back"><a href="#table-of-contents">âŒ˜ Back to top</a></div>
* Managing User Passowrds
- in the past, encrypted passwords were stored in the ~/etc/passwd~ file.
  this was thought to be secure until =dictionary attacks= on encrypted passwords became common.
- after that, the encrypted passwords were moved to the more secure ~/etc/shadow~ file.
- this new file also allowed password aging and expiration features to be implemented.
- There are 3 pieces of information stored in a modern password hash:
  ~$6$jD1.lA.ZiAmjKfxs$I0AmZF8p3kkoYJjP5tDRgMTTLa5dnbJ.U1djoSADCuuQjwcR.CDT9HCp8zuUgxhd.E.Al7UdmzlJytZQz9f0p/~
  1. *6*: the hashing algorithm.

     the number 1 indicates an *MD5* hash.

     the number 6 appears when a *SHA-512* hash is used.

  2. *jD1.lA.ZiAmjKfxs*: the /salt/ used to encrypt the hash. this is originally chosen at random.

     the salt and the unencrypted password are combined and encrypted to create the encrypted password hash.

     means: if two users used the same password, different *hashes* will be generated.

  3. *I0AmZF8p3kkoYJ....8zuUgxhd.E.Al7UdmzlJytZQz9f0p/*: the encrypted file.
