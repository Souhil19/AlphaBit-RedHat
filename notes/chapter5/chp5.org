# ------------------------------------------------------------------------------
#+TITLE:     Chapter 5: Managing Local Linux Users and Groups
#+SUBTITLE:  Kebairia Zakaria - July 2021
#+AUTHOR:    Kebairia Zakaria
#+EMAIL:     z.kebairia@esi-sba.dz
#+LANGUAGE:  en
#+STARTUP:   content showstars indent inlineimages hideblocks
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/home/zakaria/org/conf/rouger.css" />
#+OPTIONS:   toc:2 html-scripts:nil num:nil html-postamble:nil html-style:nil ^:nil
#+PROPERTY:  header-args :results none
# ------------------------------------------------------------------------------
#+HTML: <div class="back"><a href="#table-of-contents">⌘ Back to top</a></div>

* Managing Local User Accounts
** ~useradd~ create users
** ~usermod~ modifies existing users
** ~userdel~ deletes a user
* Managing Local Group Accounts
- A group must exist before a user can be added to that group.
** ~groupadd~ creates groups
- ~groupadd <groupname>~ without options uses the next available *GID* from the range specified in the ~/etc/login.defs~ file.
- the ~-g GID~ option is used to specify a specific GID.
  #+begin_src sh :results none
    sudo groupadd -g 5000 ateam
  #+end_src
- the ~-r~ option will create a system group using a GID from the range of valid system GID numbers listed in the ~/etc/login.defs~ file.
  #+begin_src sh :results none
    sudo groupadd -r appusers
  #+end_src
** ~groupmod~ modifies existing groups
#+begin_src sh :results output :exports both
  sudo groupmod --help
#+end_src

#+HTML: <details><summary><b>groupmod options</b></summary>
#+RESULTS:
#+begin_example
Usage: groupmod [options] GROUP

Options:
  -g, --gid GID                 change the group ID to GID
  -h, --help                    display this help message and exit
  -n, --new-name NEW_GROUP      change the name to NEW_GROUP
  -o, --non-unique              allow to use a duplicate (non-unique) GID
  -p, --password PASSWORD       change the password to this (encrypted)
                                PASSWORD
  -R, --root CHROOT_DIR         directory to chroot into
  -P, --prefix PREFIX_DIR       prefix directory where are located the /etc/* files

#+end_example
- let's change ateam's GID
  #+begin_src sh :results none
    sudo groupmod -g 6000 ateam
  #+end_src
** ~groupdel~ deletes a group
- the ~groupdel~ command will rmeove a group.
  #+begin_src sh :results none
    sudo groupdel javaapp
  #+end_src
- A group may not be removed if it is the primary grup0u of any existing user.
  As with ~userdel~, check all file systems to ensure that no files remain owned by the group.
** ~usermod~ alters group membership
- first let's check the options that we have with this command
  #+begin_src sh :results output :exports both
    sudo usermod --help
  #+end_src

#+HTML: <details><summary><b>usermod options</b></summary>
  #+RESULTS:
  #+begin_example
  Usage: usermod [options] LOGIN

  Options:
    -b, --badnames                allow bad names
    -c, --comment COMMENT         new value of the GECOS field
    -d, --home HOME_DIR           new home directory for the user account
    -e, --expiredate EXPIRE_DATE  set account expiration date to EXPIRE_DATE
    -f, --inactive INACTIVE       set password inactive after expiration
                                  to INACTIVE
    -g, --gid GROUP               force use GROUP as new primary group
    -G, --groups GROUPS           new list of supplementary GROUPS
    -a, --append                  append the user to the supplemental GROUPS
                                  mentioned by the -G option without removing
                                  the user from other groups
    -h, --help                    display this help message and exit
    -l, --login NEW_LOGIN         new value of the login name
    -L, --lock                    lock the user account
    -m, --move-home               move contents of the home directory to the
                                  new location (use only with -d)
    -o, --non-unique              allow using duplicate (non-unique) UID
    -p, --password PASSWORD       use encrypted password for the new password
    -R, --root CHROOT_DIR         directory to chroot into
    -P, --prefix PREFIX_DIR       prefix directory where are located the /etc/* files
    -s, --shell SHELL             new login shell for the user account
    -u, --uid UID                 new UID for the user account
    -U, --unlock                  unlock the user account
    -v, --add-subuids FIRST-LAST  add range of subordinate uids
    -V, --del-subuids FIRST-LAST  remove range of subordinate uids
    -w, --add-subgids FIRST-LAST  add range of subordinate gids
    -W, --del-subgids FIRST-LAST  remove range of subordinate gids

  #+end_example
#+HTML: </details>
#+HTML: </details>
- it seems that the ~-g~ option let us the primary group of a particular user.
  #+begin_src sh :results none
    # sudo usermod -g <newgroup> <username>
    sudo usermod -g student student
  #+end_src
- and we can add supplementary groups with the ~-aG~ options, where ~-G~ helps us adding the supplementary groups
  and the ~-a~ append these groups so that we won't override the old ones.

  #+begin_src sh :results none
    sudo groupadd sup_group
    sudo groupadd sup_group2
    sudo usermod -aG sup_group,sup_group2 zakaria
  #+end_src

#+HTML: </details>
#+HTML: <div class="back"><a href="#table-of-contents">⌘ Back to top</a></div>
* Managing User Passowrds
- in the past, encrypted passwords were stored in the ~/etc/passwd~ file.
  this was thought to be secure until =dictionary attacks= on encrypted passwords became common.
- after that, the encrypted passwords were moved to the more secure ~/etc/shadow~ file.
- this new file also allowed password aging and expiration features to be implemented.
- There are 3 pieces of information stored in a modern password hash:
  ~$6$jD1.lA.ZiAmjKfxs$I0AmZF8p3kkoYJjP5tDRgMTTLa5dnbJ.U1djoSADCuuQjwcR.CDT9HCp8zuUgxhd.E.Al7UdmzlJytZQz9f0p/~
  1. *6*: the hashing algorithm.

     the number 1 indicates an *MD5* hash.

     the number 6 appears when a *SHA-512* hash is used.

  2. *jD1.lA.ZiAmjKfxs*: the /salt/ used to encrypt the hash. this is originally chosen at random.

     the salt and the unencrypted password are combined and encrypted to create the encrypted password hash.

     means: if two users used the same password, different *hashes* will be generated.

  3. *I0AmZF8p3kkoYJ....8zuUgxhd.E.Al7UdmzlJytZQz9f0p/*: the encrypted file.
